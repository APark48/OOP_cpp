// Code written by Alfredo Jeong Hyun Park
// A01658259
// Written on 12/2/2020
// Last modified: 12/2/2020 9:14AM
// Copyright ¬© 2020. All rights reserved.

#include <iostream>
#include <vector>
#include <time.h>

namespace controlstructures
{
    /*
    1. operaNumeros. Funci√≥n que lea dos n√∫meros por teclado y permita elegir entre 3 opciones en un
    men√∫:
        ‚Ä¢ <S> Mostrar una suma de los dos n√∫meros
        ‚Ä¢ <R> Mostrar una resta de los dos n√∫meros (el primero menos el segundo)
        ‚Ä¢ <M> Mostrar una multiplicaci√≥n de los dos n√∫meros
        ‚Ä¢ En caso de no introducir una opci√≥n v√°lida, el programa informar√° con un letrero que no es
        correcta 
    */
    void numOperation(int num1, int num2)
    {
        int selection, answer;
        std::cout << "Choose operation to execute." << std::endl;
        std::cout << "1. Sum\n2. Substract\n3. Multiply" << std::endl;
        std::cout << "Your selection: ";
        std::cin >> selection;
        
        switch (selection){
        case 1:
            answer = num1 + num2;
            std::cout << answer << std::endl;
            break;
        case 2:
            answer = num1-num2;
            std::cout << answer << std::endl;
            break;
        case 3:
            answer = num1*num2;
            std::cout << answer << std::endl;
            break;
        default:
            std::cout << "Invalid number entered." << std::endl;
            break;
        }
        return;
    }

    /*
    2. numeroImpar. Funci√≥n que lea un n√∫mero impar por teclado. Si el usuario no introduce un n√∫mero
    impar, debe repetirse el proceso hasta que lo introduzca correctamente.
    */
    void notEvenNumber()
    {
        int number;
        do {
            std::cout << "Enter a number that is not even: ";
            std::cin >> number;
        } while (number%2==0);

        std::cout << number << " is not an even number." << std::endl;
        return;
    }

    /*
    3. sumaPares. Funci√≥n que sume todos los n√∫meros enteros pares entre el 0 y el 100.
    */
    int evenSum()
    {
        int sum = 0;
        for (int i=0; i<=100; i++){
            if (i&2==0){
                sum += i;
            }
        }
        return sum;
    }

    /*
    4. mediaAritmetica. Funci√≥n que pida al usuario cuantos n√∫meros quiere introducir. Luego lea todos los
    n√∫meros y realice una media aritm√©tica.
    */
    int arithmeticMean(int size)
    {
        int count = 0;
        std::vector<int> numbers;
        int number, result;
        while (count < size){
            std::cout << "Enter number: ";
            std::cin >> number;
            std::cout << std::endl;
            numbers.push_back(number);
        }
        for (int i=0; i<size; i++){
            result += numbers.at(i);
        }

        return result/size;
    }

    /*
    5. numeroMagico. Inicia generando un n√∫mero aleatorio entero positivo entre 1 y 100. Despu√©s, se
    solicita al usuario digite un n√∫mero en el mismo rango. Dentro de un ciclo, se orientar√° al usuario con
    letreros ‚ÄúM√ÅS‚Äù o ‚ÄúMENOS‚Äù para llevarlo a introducir nuevos valores hasta que, en alg√∫n intento,
    introduzca el valor coincida con el valor aleatorio original. El c√≥digo tambi√©n deber√° llevar la cuenta
    de intentos requeridos para llegar al valor buscado. Al terminar el ciclo, la funci√≥n deber√° desplegar:
    ‚ÄúAcertaste con el valor m√°gico X despu√©s de Y intentos‚Äù.
    */
    void magicNumber()
    {
        srand(time(NULL));
        int randomNumber = rand()%100+1;
        int tries = 0;
        int number;
        do {
            std::cout << "Guess the random number between 1-100: ";
            std::cin >> number;
            tries++;
        } while (number != randomNumber);
        
        std::cout << "You guessed the number " << randomNumber << " after " << tries << " tries." << std::endl;
        return;
    }

    /*
    6. conversionCelsiusFarenheit. Seg√∫n los est√°ndares internacionales, se manejan diferentes unidades
    de medici√≥n para manejo de temperaturas. Familiar√≠zate con las m√°s comunes y soluciona el siguiente
    problema. Se requiere convertir grados Celsius a grados Farenheit. El programa deber√° solicitar al
    usuario:
        ‚Ä¢ El valor inicial en Celsius.
        ‚Ä¢ El n√∫mero de conversiones que se har√°n.
        ‚Ä¢ El incremento entre los valores Celsius
    */

    void celciusToFahrenheit()
    {
        int totalCalculations;
        std::cout << "Enter how many calculations you wish to perform: ";
        std::cin >> totalCalculations;
        std::vector<float> celcius;
        std::vector<float> fahrenheit;

        for (int i=1; i<=totalCalculations; i++){
            float calculation, conversion;
            std::cout << "Enter calculation " << i << ": ";
            std::cin >> calculation;
            celcius.push_back(calculation);
            conversion = (9.0/5.0)*calculation+32;
            fahrenheit.push_back(conversion);
        }
        std::cout << "--------------------------------------------------------" << std::endl;
        std::cout << "Convertions from Celsius to Fahrenheit: " << std::endl;
        int size = celcius.size();
        for (int i=0; i<size; i++){
            std::cout << "Celsius " << i+1 << ": " << celcius.at(i) << "¬∞C" << std::endl;
            std::cout << "Fahrenheit " << i+1 << ": " << fahrenheit.at(i) << "¬∞F" << std::endl; 
        }
        std::cout << "--------------------------------------------------------" << std::endl;

        return;
    }

    /*
    7. serieAritmetica. Una serie aritm√©tica permite modelar diferentes problemas que pueden modelar
    fen√≥menos f√≠sicos y se define por:
        ùëéùëé + (ùëéùëé + ùëëùëë) + (ùëéùëé + 2ùëëùëë) + (ùëéùëé + 3ùëëùëë) + ‚ãØ + [(ùëéùëé + (ùëõùëõ ‚àí 1)ùëëùëë]
    Donde a es el primer t√©rmino, d es la ‚Äúdiferencia com√∫n‚Äù y n es el n√∫mero de t√©rminos que se van
    a sumar. Usando esta informaci√≥n, dise√±a e implementa una funci√≥n en C++ que use un ciclo para
    desplegar cada t√©rmino y para determinar la suma de la serie aritm√©tica, si se tiene que a = 1, d =
    3 y n = 25. Para el desplegado de los t√©rminos, utiliza un formato similar a:
                                        T√©rmino i: 999
    donde i es el n√∫mero del t√©rmino que debe iniciar con 1 y 999 es el valor calculado del i-√©simo
    t√©rmino. Al finalizar el ciclo, la funci√≥n debe desplegar la suma total de la serie:
                                Valor total de la serie: 999
    No se piden datos al usuario.
    */

   /*
   8. mediasGeometricaArmonica. Adem√°s del promedio aritm√©tico de un conjunto de n√∫meros, se puede
    calcular una media geom√©trica y una media arm√≥nica. Este es otra medida que permite calcular
    aspectos de rendimiento.
    Usando estas f√≥rmulas, escribe una funci√≥n que contin√∫e aceptando n√∫meros (xi) tecleados por el usuario
    hasta que se introduzca el n√∫mero 0. Calcula y despliega la media geom√©trica y la media arm√≥nica de los
    n√∫meros introducidos. OJO, el dato 0 no debe ser utilizado en los c√°lculos.
   */
    void geometricHarmonicMean()
    {

        return;
    }

}
